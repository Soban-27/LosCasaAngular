{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../login/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class ExpenseGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    let url = state.url;\n    return this.checkLogin(url);\n  }\n  checkLogin(url) {\n    let val = localStorage.getItem('isUserLoggedIn');\n    if (val == \"true\") {\n      if (url == \"/login\") return of(this.router.parseUrl('/expenses'));else return of(true);\n    } else {\n      return of(this.router.parseUrl('/login'));\n    }\n  }\n}\nExpenseGuard.ɵfac = function ExpenseGuard_Factory(t) {\n  return new (t || ExpenseGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nExpenseGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ExpenseGuard,\n  factory: ExpenseGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;;;;AAOrC,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAExEC,WAAW,CACTC,IAA4B,EAC5BC,KAA0B;IAG1B,IAAIC,GAAG,GAAWD,KAAK,CAACC,GAAG;IAE3B,OAAO,IAAI,CAACC,UAAU,CAACD,GAAG,CAAC;EAC7B;EAEAC,UAAU,CAACD,GAAW;IACpB,IAAIE,GAAG,GAAkBC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAC/D,IAAKF,GAAG,IAAI,MAAM,EAAE;MAClB,IAAIF,GAAG,IAAI,QAAQ,EACjB,OAAOR,EAAE,CAAC,IAAI,CAACI,MAAM,CAACS,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,KAG7C,OAAOb,EAAE,CAAC,IAAI,CAAC;KAClB,MAAM;MACL,OAAOA,EAAE,CAAC,IAAI,CAACI,MAAM,CAACS,QAAQ,CAAC,QAAQ,CAAC,CAAC;;EAG7C;;AA1BWZ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAa,SAAZb,YAAY;EAAAc,YAFX;AAAM","names":["of","ExpenseGuard","constructor","authService","router","canActivate","next","state","url","checkLogin","val","localStorage","getItem","parseUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\sande\\Desktop\\LosCasa\\ClientApp\\src\\app\\expenseguard\\expense.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\r\nimport { Observable, of } from 'rxjs'; \r\n\r\nimport { AuthService } from '../login/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExpenseGuard implements CanActivate {\r\n\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree > {\r\n\r\n    let url: string = state.url;\r\n\r\n    return this.checkLogin(url);\r\n  }\r\n\r\n  checkLogin(url: string): Observable<boolean | UrlTree> {\r\n    let val: string | null = localStorage.getItem('isUserLoggedIn');\r\n    if ( val == \"true\") {\r\n      if (url == \"/login\")\r\n        return of(this.router.parseUrl('/expenses'));\r\n\r\n      else\r\n        return of(true);\r\n    } else {\r\n      return of(this.router.parseUrl('/login'));\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}